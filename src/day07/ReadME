函数
Go语言中支持函数、匿名函数和闭包，并且函数在Go语言中属于”一等公民“。
1、函数定义
Go语言中定义函数使用func关键字，具体格式如下：
    func 函数名(参数) (返回值) {
        函数体
    }
其中：
  ** 函数名：由字母、数字、下划线组成。但函数名的第一个字母不能是数字。在同一个包内，函数名也不能重名。（包的概念详见后文）
  ** 参数：参数由参数变量和参数变量的类型组成，多个参数之间使用 , 分隔。
  ** 返回值：返回值由返回值变量和其变量类型组成，也可以只写返回值的类型，多个返回值必须用 ()包裹，并用 ,分隔。
  ** 函数体：实现指定功能的代码块。

2、defer
defer把它后面的语句延迟到函数即将返回的时候再执行，defer多用于函数结束之前释放资源（文件句柄、数据库连接、socket连接）。
在Go语言的函数中，return语句在底层并不是原子操作，它分为给返回值赋值和RET指令两步。而defer语句执行的时机就在返回值赋值操作后，RET指令执行前。

3、函数类型与变量
定义函数类型：我们可以使用type关键字来定义一个函数类型，具体格式如下：
    type calculation func(int, int) int
上面语句定义了一个calculation类型，它是一种函数类型，这种函数接收两个int类型的参数并且返回一个int类型的返回值。例如：下面的add函数
    func add(x, y int) int {
	    return x + y
    }
add都能赋值给calculation类型的变量。
    var c calculation       // 声明函数类型变量c
    c = add                 // 为该变量赋值

4、高阶函数
高阶函数分为函数作为参数和函数作为返回值两部分：
函数作为参数
函数也能作为返回值

5、匿名函数和闭包
*** 匿名函数
函数当然还可以作为返回值，但是在Go语言中函数内部不能再像之前那样定义函数了，只能定义匿名函数。匿名函数就是没有函数名的函数，匿名函数的定义格式如下：
    func(参数)(返回值){ 函数体 }
匿名函数因为没有函数名，所以没办法像普通函数那样调用，所以匿名函数需要保存到某个变量或者作为立即执行函数。
匿名函数多用于实现回调函数和闭包。
*** 闭包
闭包指的是一个函数和与其相关的引用环境组合而成的实体。简单来说，闭包=函数+引用环境。 首先我们来看一个例子：
// adder函数返回值为func(int) int类型的函数
func adder() func(int) int {
	var x int
	return func(y int) int {
		x += y
		return x
	}
}

func adder2(x int) func(int) int {
	return func(y int) int {
		x += y
		return x
	}
}

func main() {
	var f = adder()		// f为adder函数的返回值，即func(int) int函数
	fmt.Println(f(10)) 	//10
	fmt.Println(f(20)) 	//30
	fmt.Println(f(30)) 	//60
	f1 := adder()
	fmt.Println(f1(40)) //40
	fmt.Println(f1(50)) //90
}
变量f是一个函数并且它引用了其外部作用域中的x变量，此时f就是一个闭包。 在f的生命周期内，变量x也一直有效。

6、内置函数介绍
close：主要是用来关闭channel
len：用来求长度，比如string、array、slice、map、channel
new：用来分配内存，主要用来分配值类型，比如int、struct。返回的是指针
make：用来分配内存，主要是用来分配引用类型，比如chan、map、slice
append：用来追加元素到数组、slice中
panic和recover：用来做错误处理
Go语言中目前（Go1.16）是没有异常机制，但是使用panic/recover模式来处理错误。
panic可以在任何地方引发，但recover只有在defer调用的函数中有效。
注意：recover()必须搭配defer使用；defer一定要在可能引发panic的语句之前定义。
