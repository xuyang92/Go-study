1、简述切片和数组的区别？
答：切片进行变量赋值时，指向的是同一块地址，当修改切片中的内容时，指向该地址的内容都会生效；
数组进行变量赋值时，会进行拷贝一份新的地址，当修改数组中的内容时，只有一个生效。
切片定义时可指定长度和容量，并且切片通过append添加内容时可进行自动扩容；数组在声明时长度就固定了，不支持动态填充数据。
2、简述new和make的区别？
答：new返回的是一个指针，而make返回的是一个对象。
在go语言中，make和new都是内存的分配（堆上），但是make只用于slice、map以及channel的初始化（非零值）；
而new用于类型的内存分配，并且内存置为零。
make返回的是引用类型本身；而new返回的是指向类型的指针。
3、看代码写结果
	v1 := make([]int, 2, 5)
	fmt.Println(v1[0], len(v1), cap(v1))
    结果：0 2 5
4、看代码写结果
	v1 := make([]int, 2, 5)
	v2 := append(v1, 123)
	fmt.Println(len(v1), cap(v1))
	fmt.Println(len(v2), cap(v2))
	结果：2 5
	     3 5
5、看代码写结果
	v1 := make([]int, 2, 5)
	v2 := append(v1, 123)
	v1[0] = 999
	fmt.Println(v1)     结果：[999, 0]
	fmt.Println(v2)     结果：[999, 0, 123]
6、看代码写结果
	v1 := make([]int, 2, 2)
	v2 := append(v1, 123)
	v1[0] = 999
	fmt.Println(v1)	    结果：[999, 0]
	fmt.Println(v2)     结果：[0, 0, 123]
7、看代码写结果
    v1 := make([]int, 2, 2)
	v2 := v1[0:2]
	v1[0] = 111
	fmt.Println(v1)	    结果：[111, 0]
	fmt.Println(v2)     结果：[111, 0]
8、看代码写结果
	v1 := [][]int{[]int{11,22,33,44},[]int{44,55}}
	v1[0][2] = 999
	fmt.Println(v1)	    结果：[[11, 22, 999, 44] [44, 55]]
9、看代码写结果
	v1 := [][]int{[]int{11,22,33,44},[]int{44,55}}
	v2 := v1[0]
	v2[2] = 69
	fmt.Println(v1)		结果：[[11, 22, 69, 44] [44, 55]]
10、看代码写结果
	v1 := [][]int{[]int{11,22,33,44},[]int{44,55}}
	v2 := append(v1[0], 99)
	v2[2] = 69
	fmt.Println(v1)		结果：[[11, 22, 33, 44] [44, 55]]
11、看代码写结果
	v1 := [][]int{[]int{11,22,33,44},[]int{44,55}}
	v2 := append(v1[0], 99)
	v2[0] = 69
	fmt.Println(v1)		结果：[[11, 22, 33, 44] [44, 55]]
	fmt.Println(v2)		结果：[69, 22, 33, 44, 99]