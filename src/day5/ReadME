*********数据类型*********
数据类型，其实就是各种各样类型的数据。
Go语言中常见的数据类型有挺多，例如：
1、整型，用于表示整数。
2、浮点型，用于表示小数。
3、布尔型，用于表示真/假。
4、字符串，用于表示文本信息。
5、数组，用于表示多个数据（数据集合）。
6、指针，用于表示内存地址的类型。
7、切片，用于表示多个数据（数据集合）。
8、字典，用于表示键值对结合。
9、结构体，用于自定义一些数据集合。
10、接口，用于约束和泛指数据类型。

一、整型
Go中的整型分为有符号和无符号两大类，有符号的包含负值，无符号不包含负值。
有符号整数：int8(-2^7————2^7-1)、int16(-2^15————2^15-1)、
int32(-2^31————2^31-1)、int64(-2^63————2^63-1)、
int(在32位操作系统使用32位、在64位操作系统使用64位)
无符号整数：uint8(0————2^7-1)、uint16(0————2^15-1)、
uint32(0————2^31-1)、uint64(0————2^63-1)、
uint(在32位操作系统使用32位、在64位操作系统使用64位)
1.1 整型之间的转换
低位转高位，没问题。
高位转低位，可能会有问题。
1.2 整型与字符串之间的转换
整型转换为字符串，不会失败。
字符串转换为整型，转换可能失败，返回err。
1.3 进制转换
Go语言代码中，十进制是以整型的方式存在。其他进制，是以字符串的的形式存在。
整型转换为其他进制
其他进制转换为整型。
1.4 常见数学运算
见mathExample.go中的代码示例以及说明。
1.5 指针/nil/声明变量/new
声明变量：
var v1 int
v2 := 999
指针：
new关键字用于创建内存并进行内部数据的初始化，并返回一个指针类型。
nil指Go语言中的空值。
var v3 *int
v4 := new(int)
1.6 超大整型
推荐使用指针的方式创建超大整型的对象，即使用new来进行创建和初始化。
建议：
***尽量使用new方式去初始化并返回一个指针类型的方式。
***易错的点（int类型与*int类型是两种不同的类型）。

一、浮点型
浮点型，计算机中小数的表示方式，如：3.14
Go语言中提供了两种浮点型：
**float32，用32位（4个字节）来存储浮点型。
**float64，用64位（8个字节）来存储浮点型。