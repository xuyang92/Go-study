*********数据类型*********
数据类型，其实就是各种各样类型的数据。
Go语言中常见的数据类型有挺多，例如：
1、整型，用于表示整数。
2、浮点型，用于表示小数。
3、布尔型，用于表示真/假。
4、字符串，用于表示文本信息。
5、数组，用于表示多个数据（数据集合）。
6、指针，用于表示内存地址的类型。
7、切片，用于表示多个数据（数据集合）。
8、字典，用于表示键值对结合。
9、结构体，用于自定义一些数据集合。
10、接口，用于约束和泛指数据类型。

一、整型
Go中的整型分为有符号和无符号两大类，有符号的包含负值，无符号不包含负值。
有符号整数：int8(-2^7————2^7-1)、int16(-2^15————2^15-1)、
int32(-2^31————2^31-1)、int64(-2^63————2^63-1)、
int(在32位操作系统使用32位、在64位操作系统使用64位)
无符号整数：uint8(0————2^7-1)、uint16(0————2^15-1)、
uint32(0————2^31-1)、uint64(0————2^63-1)、
uint(在32位操作系统使用32位、在64位操作系统使用64位)
1.1 整型之间的转换
低位转高位，没问题。
高位转低位，可能会有问题。
1.2 整型与字符串之间的转换
整型转换为字符串，不会失败。
字符串转换为整型，转换可能失败，返回err。
1.3 进制转换
Go语言代码中，十进制是以整型的方式存在。其他进制，是以字符串的的形式存在。
整型转换为其他进制
其他进制转换为整型。
1.4 常见数学运算
见mathExample.go中的代码示例以及说明。
1.5 指针/nil/声明变量/new
声明变量：
var v1 int
v2 := 999
指针：
new关键字用于创建内存并进行内部数据的初始化，并返回一个指针类型。
nil指Go语言中的空值。
var v3 *int
v4 := new(int)
1.6 超大整型
推荐使用指针的方式创建超大整型的对象，即使用new来进行创建和初始化。
建议：
***尽量使用new方式去初始化并返回一个指针类型的方式。
***易错的点（int类型与*int类型是两种不同的类型）。

二、浮点型
浮点型，计算机中小数的表示方式，如：3.14
Go语言中提供了两种浮点型：
**float32，用32位（4个字节）来存储浮点型。
**float64，用64位（8个字节）来存储浮点型。
2.1 非精确
2.2 float底层存储原理
第一步：浮点型转换为二进制（比如39.29）
**整数部分：直接转换为二进制（10进制转换为2进制），即：39--->100111
**小数部分：让小数部分乘以2，结果小于2将结果继续乘以2，结果大于1
则将结果减去1之后继续乘以2，结果等于1则结束。
0.29 * 2 = 0.58
0.58 * 2 = 1.16
0.16 * 2 = 0.32
0.32 * 2 = 0.64
0.64 * 2 = 1.28
0.28 * 2 = 0.56
0.56 * 2 = 1.12
0.12 * 2 = 0.24
0.24 * 2 = 0.48
0.48 * 2 = 0.96
0.96 * 2 = 1.92
0.92 * 2 = 1.84
0.84 * 2 = 1.68
0.68 * 2 = 1.36
0.36 * 2 = 0.72
0.72 * 2 = 1.44
0.44 * 2 = 0.88
0.88 * 2 = 1.76
0.76 * 2 = 1.52
0.52 * 2 = 1.04
0.04 * 2 = 0.08
0.08 * 2 = 0.16
0.16 * 2 = 0.32
......
将相乘之后结果的整数部分拼接起来，所以0.29的二进制表示：01001010001111010111000......
所以，最终39.29的二进制表示为：‘100111.01001010001111010111000...’
第二步：科学计数法表示
1.0011101001010001111010111000... * 2**5
第三步：存储
以float32为例来进行存储，用32位来存储浮点型。
1位sign、8位exponent、23位fraction
**sign，用1位来表示浮点数正负，0表示正数，1表示负数。
**exponent，用8位来表示共有256种（0——255），含正负值（-127——128）
**fraction，存储小数点后的所有数据。
2.3 decimal精确的小数处理
Go语言内部没有decimal。
第三方包，则需要在本地的Go环境中先安装再使用，
第三方包源码地址：https://github.com/shopspring/decimal
第一步:安装第三方包
go get github.com/shopspring/decimal
go get命令无响应，解决办法：设置代理设置代理————SET GOPROXY=https://goproxy.cn
命令执行完成之后，在$(GOPATH)/src的目录下就会出现github.com/shopspring/decimal的目录，
这就是第三方模块安装的位置。
第二步:使用decimal包

三、布尔类型
表示真假，一般是和条件等配合使用，用于满足某个条件时，执行某个操作。

四、字符串
在编写程序时，使用字符串来进行文本的处理。
4.1 字符串的本质
计算机中所有的操作和数据最终都是二进制。
Go语言中的字符串是utf-8编码的序列。
//unicode字符集：文字-->码点（ucs4，4个字节表示）
//utf-8编码，对unicode字符集的码点进行编码最终得到二进制。
4.2 字符串常见功能
字符串属于在程序中最常用的数据类型，所以Go中为字符串提供了很多常见的操作。
4.2.1 获取长度
4.2.2 是否以xx开头
4.2.3 是否以xx结尾
4.2.4 是否包含
4.2.5 变大写
4.2.6 变小写
4.2.7 去两边
4.2.8 替换
4.2.9 分割
4.2.10 拼接
4.2.11 string转换为int
4.2.12 int转换为string
4.2.13 字符串和字节集合
4.2.14 字符串和rune集合
4.2.15 string和字符
4.3 索引、切片和循环
